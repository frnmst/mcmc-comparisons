#!/bin/bash
#
# fbopt version 0.3
#
# Written in 2018 by Franco Masotti/frnmst <franco.masotti@student.unife.it>
#
# To the extent possible under law, the author(s) have dedicated all 
# copyright and related and neighboring rights to this software to the public 
# domain worldwide. This software is distributed without any warranty.
#
# You should have received a copy of the CC0 Public Domain Dedication along 
# with this software. If not, see 
# <http://creativecommons.org/publicdomain/zero/1.0/>. 
#
#
# See also https://frnmst.gitlab.io/notes/my-bash-option-parsing-template.html
#

show_help()
{
    cat <<-EOF
Usage: run.sh [OPTIONS]
Run MCMC experiments

Mandatory arguments to long options are mandatory for short options too.
Options:
    -f, --four-way-comparison           compare SWI and XSB experiments. In
                                        this case you need to specify the experiment
                                        names separating them with a colon
                                        character and specifing the SWI then
                                        XSB the experiment name, like this:
                                        'experiment_name_swi:experiment_name_xsb'
    -g, --graph                         run the plot script after the experiments
    --graph-only                        run the plot script only
    -h, --help                          print this help
    --list-experiment-names             list the available experiment
    --list-experiment-types             list the available experiment types
    -m, --min=MIN                       starting number of samples
    --multi-switch=RESAMPLINGPROB       enable multi switch instead of single
                                        switch for AMCMC XSB experiments with the
                                        specified resampling probability. This
                                        number goes from 0.0 to 1.0
    -M, --max=MAX                       ending number of samples
    -p, --parallel                      execute experiments on separate computing
                                        threads. If this option is enabled the
                                        number of threads is determined by the
                                        '--threads' option. If this option is
                                        disabled, the runs are executed
                                        consecutively
    --single-run-with-label=LABEL       run a single experiment with the specified
                                        run label. This option excludes
                                        both the '--parallel' option and the
                                        '--runs' option
    --print-flags                       print the enabled options. This can also
                                        be used to print the default options
    -r, --runs=RUNS, --threads=RUNS     the number of runs or computing threads.
                                        See the '--parallel' option for more
                                        information
    --memory                            the amount om memory in MB assigned
                                        to the SLURM job
    --no-remove-csv-files               avoid removing all csv files before
                                        running a experiment. This option defaults
                                        to false in all cases except when run
                                        with the '--graph-only' option. In that
                                        case the value of this option is
                                        fixed to true and cannot be changed.
                                        Set this option if you want to keep old
                                        results and appending new ones to the
                                        same file. Normally, you should not set
                                        this option
    --partition                         the partition name used for the
                                        SLURM job
    --repetitions=REPETITIONS           repeat the same parallel experiments
                                        a selected number of times. This option
                                        is ignored by by non parallel experiments
    -s, --steps=STEPS                   the number of samples between
                                        consecutive iterations
    -S, --slurm                         run the experiments with the SLURM system.
                                        This disables the '--graph', '--parallel'
                                        options and implies the
                                        '--single-run-with-label' option
    -t, --experiment-name=NAME          the name of the experiment
    -y, --experiment-type=NAME          the type of the experiment

Exit status:
 0  if OK,
 1  if an error occurred.

This software is released under the BSD 2-Clause license
Copyright (c) 2018-2019, Franco Masotti
EOF
}

# A function that prints the variable name and value of all
# the flags enabled by the user. This is useful to check that
# all the flags are correct, as kind of a dry run.
show_flags()
{
    local flags="${*}"

    for flag in ${flags}; do
            printf "%s='%s'\n" "${flag}" "${!flag}"
    done
}

getopt_error()
{
    local program_name="${0}"

    printf "%s\n" "Try '"${program_name}" --help' for more information"
} 1>&2 2>&-

main()
{
    # Create a new array from the reference of the input one.
    # See https://stackoverflow.com/questions/1063347/passing-arrays-as-parameters-in-bash
    # See some comments below.
    declare -a argc=("${!1}")

    # Set the options. flag_f has an optional argument.
    local getopt_short_options='fm:M:s:r:ght:y:pS'
    local getopt_long_options='list-experiment-names,list-experiment-types,min:,max:,step:,runs:,help,\
parallel,single-run-with-label:,experiment-name:,threads:,experiment-type:,graph,graph-only,\
multi-switch:,no-remove-csv-files,four-way-comparison,repetitions:,slurm,memory:,print-flags'

    # Set the default values for the flags.
    local four_way_comparison='false'
    local graph='false'
    local graph_only='false'
    local list_experiment_names='false'
    local list_experiment_types='false'
    local min="${MIN}"
    local max="${MAX}"
    local step="${STEP}"
    local runs="${RUNS}"
    local experiment_name="${EXPERIMENT_NAME}"
    local parallel='false'
    local label='-1'
    local no_remove_csv_files='false'
    local experiment_type="${EXPERIMENT_TYPE}"
    local multi_switch='false'
    local repetitions=0
    local slurm='false'
    local memory=8192

    local program_name="${0}"
    opts="$(getopt \
        --name "${program_name}" \
        --shell bash \
        --options "${getopt_short_options}" \
        --longoptions "${getopt_long_options}" \
        -- \
        "${argc[@]}")"
    getopt_retval=${?}
    # Check that getopt works and that some kind of argument
    # is passed to the script. This is "quotation hell".
    a="'"${argc[@]}"'"
    { [ ${getopt_retval} -ne 0 ] || [ -z "${a}" ]; } && getopt_error && return 1
    eval set -- "${opts}"

    # Option parsing.
    while [ "${1}" != '--' ]; do
        case "${1}" in

            -f | --four-way-comparison )    four_way_comparison='true' ;;

            --list-experiment-names )       list_experiment_names='true' ;;

            --list-experiment-types )       list_experiment_types='true' ;;

            -g | --graph )              graph='true' ;;

            --graph-only )              graph_only='true' ;;

            -h | --help )               help='true' ;;

            -m | --min )                min="${2}";
                                        shift 1 ;;

            -M | --max )                max="${2}";
                                        shift 1 ;;

            --multi-switch )            multi_switch="${2}" ;
                                        shift 1 ;;

            --no-remove-csv-files )     no_remove_csv_files='true' ;;

            -p | --parallel )           parallel='true' ;;

            --print-flags )             print_flags='true' ;;

            -r | --runs | --threads )   runs="${2}";
                                        shift 1 ;;

            --memory )                  memory="${2}";
                                        shift 1 ;;

            --single-run-with-label )   label="${2}";
                                        shift 1 ;;

            --repetitions )             repetitions="${2}"
                                        shift 1 ;;

            -s | --step )               step="${2}";
                                        shift 1 ;;

            -S | --slurm )              slurm='true';;

            -t | --experiment-name )    experiment_name="${2}";
                                        shift 1 ;;

            -y | --experiment-type )    experiment_type="${2}";
                                        shift 1 ;;

        esac
        # Iterate through all arguments.
        shift 1
    done

    shift 1
    # Everything else after '--' is an argument.
    argc="${*}"

    # Check that the flags that must be non empty are actually not empty.
    # A user might infact circumvent getopt's mechanisms like this
    # ./program -flag ''
    # This can also be done inside the option parser loop but to avoid nestings
    # I prefer it done here.
    { [ -z "${min}" ] \
        || [ -z "${max}" ] \
        || [ -z "${step}" ] \
        || [ -z "${runs}" ] \
        || [ -z "${label}" ] \
        || [ -z "${experiment_name}" ]; } \
        && getopt_error && return 1

    # For the xsb type experiments, override the default experiment name to avoid using the
    # one used for swi. This code is here because of the print_flags option.
    [ "${experiment_type}" = 'xsb' ] && [ "${experiment_name}" = "${experiment_NAME}" ] && experiment_name='experiment33_cond_prob'

    [ "${print_flags}" = 'true' ] \
        && show_flags \
            'four_way_comparison' \
            'graph' \
            'graph_only' \
            'label' \
            'list_experiment_names' \
            'list_experiment_types' \
            'min' \
            'max' \
            'step' \
            'runs' \
            'experiment_name' \
            'experiment_type' \
            'parallel' \
            'no_remove_csv_files' \
            'multi_switch' \
            'repetitions' \
            'slurm' \
            'memory' \
        && return 0
    [ "${help}" = 'true' ] && show_help && return 0

    # From now on you should call a function or an external program
    # using the values of the flag variables.
    check_binaries
    [ "${graph_only}" = 'true' ] && no_remove_csv_files='true' && graph='true'
    [ "${no_remove_csv_files}" = 'false' ] && remove_csv_files
    [ "${slurm}" = 'true' ] \
        && run_experiments_with_slurm "${experiment_name}" ${min} ${max} ${step} ${memory} ${partition} \
        && return 0
    [ "${parallel}" = 'true' ] \
        && [ "${label}" != '-1' ] \
        && getopt_error \
        && return 1
    [ "${list_experiment_names}" = 'true' ] && list_available_experiment_names && return 0
    [ "${list_experiment_types}" = 'true' ] && list_available_experiment_types && return 0

    local resampling_style=''
    if [ "${experiment_type}" = 'xsb' ] && [ "${multi_switch}" != 'false' ]; then
        resampling_style='multiswitch'
        resampling_probability="${multi_switch}"
    else
        resampling_style='singleswitch'
        resampling_probability='0.0'
    fi


    # We need a loop to make the 4 way comparison.
    local stop='false'
    local i=0
    local idx=0
    # experiment names for the plot script.
    local experiment_name_a=''
    local experiment_name_b=''
    local experiment_name_orig=''
    while [ "${stop}" = 'false' ]; do
        if [ "${four_way_comparison}" = 'false' ]; then
            # No overrides.
            stop='true'
            experiment_name_a="${experiment_name}"
        else

            # We need to override parallel because of a non-implemented
            # xsb experiment.
            parallel='true'
            no_remove_csv_files='true'

            if [ ${i} -eq 0 ]; then
                # Run SWI experiment.
                experiment_type='swi'
                experiment_name_orig="${experiment_name}"
                idx=$(expr index "${experiment_name}" ':')
                experiment_name="${experiment_name:0:$((${idx}-1))}"
                experiment_name_a="${experiment_name}"
            elif [ ${i} -eq 1 ]; then
                # Run XSB experiment.
                experiment_type='xsb'
                experiment_name="${experiment_name_orig}"
                experiment_name="${experiment_name:${idx}}"
                experiment_name_b="${experiment_name}"
            else
                stop='true'
                continue
            fi
        fi

        # If this flag is true, we need to extract the experiment names only
        # and then exit this loop.
        [ "${graph_only}" = 'true' ] && i=$((${i}+1)) && continue

        # Run a single experiment.
        if [ "${label}" = '-1' ] && [ "${parallel}" = 'false' ]; then
            if [ "${experiment_type}" = 'xsb' ]; then
                # This does not work.
                # run_xsb_experiments "${experiment_name}" ${min} ${max} ${step} ${runs} ${resampling_style} 'sequential'
                printf "%s\n" 'not implemented'
            else
                nice -n 0 swipl -s "${EXPERIMENTS_DIRECTORY}"/experiments "${experiment_name}" ${min} ${max} ${step} ${runs} 0
            fi
        # Run experiments in parallel.
        elif [ "${parallel}" = 'true' ]; then
            if [ "${experiment_type}" = 'xsb' ]; then
                # Export variables so that they are visible to GNU Parallel.
                export -f run_xsb_experiments
                export XSB_AMCMC_DIRECTORY
                export XSB_AMCMC_STARTUP_FILE
                if [ ${repetitions} -gt 0 ]; then
                    local repeat_idx=0
                    local i=1
                    while [ ${repeat_idx} -lt ${repetitions} ]; do
                        seq ${i} $((${i}+${runs}-1)) | nice -n 0 parallel --lb run_xsb_experiments "${experiment_name}" ${min} ${max} ${step} {} ${resampling_style} ${resampling_probability} 'single'
                        i=$((${i}+${runs}))
                        repeat_idx=$((${repeat_idx}+1))
                    done
                else
                    seq 1 ${runs} | nice -n 0 parallel --lb run_xsb_experiments "${experiment_name}" ${min} ${max} ${step} {} ${resampling_style} ${resampling_probability} 'single'
                fi
                # Move the csv file to a place where it can be feeded to the plot script.
                mv ""${XSB_AMCMC_DIRECTORY}"/"${experiment_name}".csv" .
            else
                if [ ${repetitions} -gt 0 ]; then
                    local repeat_idx=0
                    local i=1
                    while [ ${repeat_idx} -lt ${repetitions} ]; do
                        seq ${i} $((${i}+${runs}-1)) | nice -n 0 parallel --lb swipl -s "${EXPERIMENTS_DIRECTORY}"/experiments "${experiment_name}" ${min} ${max} ${step} {} 1
                        i=$((${i}+${runs}))
                        repeat_idx=$((${repeat_idx}+1))
                    done
                else
                    seq 1 ${runs} | nice -n 0 parallel --lb swipl -s "${EXPERIMENTS_DIRECTORY}"/experiments "${experiment_name}" ${min} ${max} ${step} {} 1
                fi
            fi
        # Run a single experiment with a label.
        elif [ "${label}" != '-1' ]; then
            if [ "${experiment_type}" = 'xsb' ]; then
                nice -n 0 run_xsb_experiments "${experiment_name}" ${min} ${max} ${step} ${runs} ${resampling_style} 'single'
            else
                nice -n 0 swipl -s "${EXPERIMENTS_DIRECTORY}"/experiments "${experiment_name}" ${min} ${max} ${step} ${label} 1
            fi
        fi

        i=$((${i}+1))
    done

    [ "${graph}" = 'true' ] && plot_comparison "${experiment_name_a}" "${experiment_name_b}"
}

# Test dependencies and versions.
# getopt must return 4 to be fully compatible. See getopt's manual.
which bash getopt 1>/dev/null 2>/dev/null && { getopt -T; [ ${?} -eq 4 ]; }

# Get and pass argc to the main function.
# All this work with an array must be done to preserve
# quotations for arguments that have whitespaces.
# See https://lists.debian.org/debian-user/2007/12/msg01244.html
declare -a opts=()
for opt in "${@}"; do
    opts=("${opts[@]}" "${opt}")
done
main 'opts[@]'

