#!/bin/bash
#
# fbopt version 0.3
#
# Written in 2018 by Franco Masotti/frnmst <franco.masotti@student.unife.it>
#
# To the extent possible under law, the author(s) have dedicated all 
# copyright and related and neighboring rights to this software to the public 
# domain worldwide. This software is distributed without any warranty.
#
# You should have received a copy of the CC0 Public Domain Dedication along 
# with this software. If not, see 
# <http://creativecommons.org/publicdomain/zero/1.0/>. 
#
#
# See also https://frnmst.gitlab.io/notes/my-bash-option-parsing-template.html
#

show_help()
{
    cat <<-EOF
Usage: run.sh [OPTIONS]
Run MCMC tests

Mandatory arguments to long options are mandatory for short options too.
Options:
    -g, --graph                         run the plot script after the tests
    --graph-only                        run the plot script only
    -h, --help                          print this help
    --list-test-names                   list the available test
    --list-test-types                   list the available test types
    -m, --min=MIN                       starting number of samples
    -M, --max=MAX                       ending number of samples
    -p, --parallel                      execute tests on separate computing
                                        threads. If this option is enabled the
                                        number of threads is determined by the
                                        '--threads' option. If this option is
                                        disabled, the runs are executed
                                        consecutively.
    --single-run-with-label=LABEL       run a single test with the specified
                                        run label. This option excludes
                                        both the '--parallel' option and the
                                        '--runs' option
    --print-flags                       print the enabled options. This can also
                                        be used to print the default options
    -r, --runs=RUNS, --threads=RUNS     the number of runs or computing threads.
                                        See the '--parallel' option for more
                                        information
    --no-remove-csv-files               avoid removing all csv files before
                                        running a test. This option defaults
                                        to false in all cases except when run
                                        with the '--graph-only' option. In that
                                        case the value of this option is
                                        fixed to true and cannot be changed.
                                        Set this option if you want to keep old
                                        results and appending new ones to the
                                        same file. Normally, you should not set
                                        this option
    -s, --steps=STEPS                   the number of samples between
                                        consecutive iterations
    -t, --test-name=NAME                the name of the test
    -y, --test-type=NAME                the type of the test

Exit status:
 0  if OK,
 1  if an error occurred.

This software is released under the BSD 2-Clause license
Copyright (c) 2018, Franco Masotti
EOF
}

# A function that prints the variable name and value of all
# the flags enabled by the user. This is useful to check that
# all the flags are correct, as kind of a dry run.
show_flags()
{
    local flags="${*}"

    for flag in ${flags}; do
            printf "%s='%s'\n" "${flag}" "${!flag}"
    done
}

getopt_error()
{
    local program_name="${0}"

    printf "%s\n" "Try '"${program_name}" --help' for more information"
} 1>&2 2>&-

main()
{
    # Create a new array from the reference of the input one.
    # See https://stackoverflow.com/questions/1063347/passing-arrays-as-parameters-in-bash
    # See some comments below.
    declare -a argc=("${!1}")

    # Set the options. flag_f has an optional argument.
    local getopt_short_options='m:M:s:r:ght:y:p'
    local getopt_long_options='list-test-names,list-test-types,min:,max:,step:,runs:,help,\
parallel::,single-run-with-label:,test-name:,threads:,test-type:,graph,graph-only,no-remove-csv-files,print-flags'

    # Set the default values for the flags.
    local graph='false'
    local graph_only='false'
    local list_test_names='false'
    local list_test_types='false'
    local min="${MIN}"
    local max="${MAX}"
    local step="${STEP}"
    local runs="${RUNS}"
    local test_name="${TEST_NAME}"
    local parallel='false'
    local label='-1'
    local no_remove_csv_files='false'
    local test_type="${TEST_TYPE}"

    local program_name="${0}"
    opts="$(getopt \
        --name "${program_name}" \
        --shell bash \
        --options "${getopt_short_options}" \
        --longoptions "${getopt_long_options}" \
        -- \
        "${argc[@]}")"
    getopt_retval=${?}
    # Check that getopt works and that some kind of argument
    # is passed to the script. This is "quotation hell".
    a="'"${argc[@]}"'"
    { [ ${getopt_retval} -ne 0 ] || [ -z "${a}" ]; } && getopt_error && return 1
    eval set -- "${opts}"

    # Option parsing.
    while [ "${1}" != '--' ]; do
        case "${1}" in

            --list-test-names )         list_test_names='true' ;;

            --list-test-types )         list_test_types='true' ;;

            -g | --graph )              graph='true' ;;

            --graph-only )              graph_only='true' ;;

            -h | --help )               help='true' ;;

            -m | --min )                min="${2}";
                                        shift 1 ;;

            -M | --max )                max="${2}";
                                        shift 1 ;;

            --no-remove-csv-files )     no_remove_csv_files='true' ;;

            -p | --parallel )           parallel='true' ;;

            --print-flags )             print_flags='true' ;;

            -r | --runs | --threads )   runs="${2}";
                                        shift 1 ;;

            --single-run-with-label )   label="${2}";
                                        shift 1 ;;

            -s | --step )               step="${2}";
                                        shift 1 ;;

            -t | --test-name )          test_name="${2}";
                                        shift 1 ;;

            -y | --test-type )          test_type="${2}";
                                        shift 1 ;;

        esac
        # Iterate through all arguments.
        shift 1
    done

    shift 1
    # Everything else after '--' is an argument.
    argc="${*}"

    # Check that the flags that must be non empty are actually not empty.
    # A user might infact circumvent getopt's mechanisms like this
    # ./program -flag ''
    # This can also be done inside the option parser loop but to avoid nestings
    # I prefer it done here.
    { [ -z "${min}" ] \
        || [ -z "${max}" ] \
        || [ -z "${step}" ] \
        || [ -z "${runs}" ] \
        || [ -z "${label}" ] \
        || [ -z "${test_name}" ]; } \
        && getopt_error && return 1
    [ "${print_flags}" = 'true' ] \
        && show_flags \
            'graph' \
            'graph_only' \
            'label' \
            'list_test_names' \
            'list_test_types' \
            'min' \
            'max' \
            'step' \
            'runs' \
            'test_name' \
            'parallel' \
            'no_remove_csv_files' \
        && return 0
    [ "${help}" = 'true' ] && show_help && return 0

    # From now on you should call a function or an external program
    # using the values of the flag variables.
    check_binaries
    [ "${graph_only}" = 'true' ] && no_remove_csv_files='true'
    [ "${no_remove_csv_files}" = 'false' ] && remove_csv_files
    [ "${parallel}" = 'true' ] \
        && [ "${label}" != '-1' ] \
        && getopt_error \
        && return 1
    [ "${list_test_names}" = 'true' ] && list_available_test_names && return 0
    [ "${list_test_types}" = 'true' ] && list_available_test_types && return 0
    [ "${graph_only}" = 'true' ] && { plot_comparison "${test_name}"; return ${?}; }

    # Run a single test.
    if [ "${label}" = '-1' ] && [ "${parallel}" = 'false' ]; then
        if [ "${test_type}" = 'xsb' ]; then
            run_xsb_tests "${test_name}"
        else
            swipl -s "${TESTS_DIRECTORY}"/tests "${test_name}" ${min} ${max} ${step} ${runs} 0
        fi
    # Run tests in parallel.
    elif [ "${parallel}" = 'true' ]; then
        if [ "${test_type}" = 'xsb' ]; then
            :
        else
            seq 1 ${runs} | parallel --lb swipl -s "${TESTS_DIRECTORY}"/tests "${test_name}" ${min} ${max} ${step} {} 1
        fi
    # Run a single test with a label.
    elif [ "${label}" != '-1' ]; then
        if [ "${test_type}" = 'xsb' ]; then
            :
        else
            swipl -s "${TESTS_DIRECTORY}"/tests "${test_name}" ${min} ${max} ${step} ${label} 1
        fi
    fi

    [ "${graph}" = 'true' ] && plot_comparison "${test_name}"
}

# Test dependencies and versions.
# getopt must return 4 to be fully compatible. See getopt's manual.
which bash getopt 1>/dev/null 2>/dev/null && { getopt -T; [ ${?} -eq 4 ]; }

# Get and pass argc to the main function.
# All this work with an array must be done to preserve
# quotations for arguments that have whitespaces.
# See https://lists.debian.org/debian-user/2007/12/msg01244.html
declare -a opts=()
for opt in "${@}"; do
    opts=("${opts[@]}" "${opt}")
done
main 'opts[@]'

